3/20/2022

Day 33 Void Methods

java.day33_methods
____________________________________________________________

Void Methods
____________________________________________________________

Recap

	1D Single Dimensional Arrays

		int [] nums = {1, 2, 5}
		String [] words = {"a", "b1", "c"}


	2D Array

		array inside of an array - the elements were arrays

		int [][] n = { {2, 3, 5, 6}, {1, 5, 123, 51} };

		n[0] --> {2, 3, 5, 6}
		n[1] --> {1, 5, 123, 51}

		n[0][0] --> 2
		n[0][1] --> 3
		n[0][2] --> 5
		n[0][3] --> 6

		n.length --> 2

		n[0].length --> 4

	loop through 2d array

	for each

		for(int [] arr : n){
			// this loop goes through the 2d array. The elements are arrays

			for(int number : arr){
				// this loop goes through each inner array, which will see each number

			}

		}

	traditional

		for(int i = 0; i < n.length; i++){
			// this loop goes through the 2d array. The elements are arrays
			// to access each array element --> n[i]

			for(int j = 0; j < n[i].length; j++ ){

				// this loop goes through each inner array, which will see each number
				// to access every inner element --> n[i][j]

			}
		}

declaring 2D array

	datatType [][] arrayName = new dataType[x][z];

		where x is how many elements the 2D array has - number of arrays

		where z is the size of each inner array
			-> is optional to define. If it is not defined then the inner arrays sizes do not matter, they can be different

	datatType [][] arrayName = { arrayName1, arrayName2, etc}

	dataType [][] arrayName = { {element, element, element, etc}, {element, element, element, etc}, {element, element, element, etc} };

Q: Why is it giving NullPointerException
String [][] str = new String[2][];  // [ null, null ]
        str [0][0] = "str"; // no array yet, this code will cause problems

       String [] a = {"element", "element"};
       str[0] = a;

       str[1] = new String[]{"element", "element"}

String s = null;
s.charAt(0); --> null.charAt(0) --> NullPointerException

____________________________________________________________

Methods

	a code block that has reusable code

	There is ready methods from java: String methods, Arrays class methods, Scanner method, etc
		-> Code already written and is used by programmers

	We can create our own custom methods, which means we can create reusable code. After writing a method we can call/use the method anywhere in the project

	in other language you may hear function, but in java they are call methods

	Ex:

		public static void hello(){
			System.out.println("Hello");
		}

		public --> access modifier, allows us to call the method in the whole project
			-> Until we say or see anything else, we will use public or our methods

		static --> allows us to call the method by the class name

			className.method()

			-> in the same file, you don't need to give the class name

		void --> no return value. The method will execute some code, but no value is going to come out of it

			Ex: Arrays.sort()

		hello() --> name of the method
			-> Names should be clear about the action of the method

	main method: a special method that is executed when the code is run

	custom method: will not run by themselves, we have to call/use them somewhere

Parameters:

	to allow our methods to have input we are able to defined parameters

	if a method has a parameter then a value must be given into order to call the method

		-> parameter: name inside of the method

		-> argument: value given to call the method

	the parameters are local variables in the method

		-> the variables cannot be used outside of the method

	you can have multiple parameters by using a comma to separate them

	there is no restriction to the types, to the number of parameters

	Ex:

		printNumber(int n)  --> method has an int parameter that will be references by the n variable

		to use this method:

		printNumber(5) --> when calling the method an int type value must be given, and that is called the argument


