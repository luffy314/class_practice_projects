5/7/2022

Day 55 Polymorphism

java.day55_polymorphism
____________________________________________________________

Interface
OOP: Polymorphism
____________________________________________________________

java.day55_polymorphism.shopping

	Inheritance between:

	class -> class
		extends

	interface -> class
		implements

	interface -> interface
		extends

inheritance in interface

	interface is not a class, it does not follow the same rules as classes

	in java a class cannot have more than 1 direct parent class

	but a class can implement as many interfaces as it wants

	Ex:

		Cat extends Animal implements Playable, Petable

		Tiger extends Animal implements Swimmable

		Cow extends Animal implements Consumable, Petable

		Shark extends Animal implements Swimmable, Consumable

		Duck extends Animal implements Playable, Swimmable, Consumable, Petable

	public interface Aqua extends Swimmable, Consumable {

	}

	Shark extends Animal implement Aqua

	Duck extends Animal implement Playable, Aqua

	public interface isFriendly extends Playable, Petable {

	}

	Duck extends Animal implement isFriendly, Aqua // same as line 41

methods in interfaces

	java.day55_polymorphism.interface_methods

	able to create 3 types of methods in an interface

	abstract methods: any method created will be abstract by default

	static method: a method that has implementation in the interface
		static: access by the interface

			-> not inherited to the class that implement

	default method: a method that has implementation in the interface
		instance for the classes that implement

	Note: static and default methods were added in java 8

abstract class vs interface

	Both:
		can't objects
		can create abstract methods
		can create static methods
		can be inherited (class to class and interface to interface)
		create an is a relation

	Abstract class:
		can have constructors
		can have instance variables
		can have blocks (static block)
		can use any access modifier on any variables/method
		class can only have one parent

	interface:
		public access modifier on variables/method by default
		methods created here are abstract by default
		only has static final variables
			no instance variables
		can create default methods
		static methods are not inherited
		not a class, so more flexible for inheritance. A class can inherit as many interfaces as needed and an interface can inherit as many interfaces

Note: java 9 added ability to use private and protected access modifiers
____________________________________________________________

Polymorphism

Objects and References

	public interface Driveable {}

	public class Street implements Driverable{

	}

	Street obj = new Street();

		Street obj --> reference
		new Street(); --> object

	Street obj2; --> only a reference

	Street obj3 = null; --> no object here

	new Street(); --> object with no reference

Polymorphism

	the object taking different forms

	an object is able to take different form by the reference

	** what are the possible references of an object?

		- itself: the reference is the same type as the object
			Street obj = new Street();

		- any super class: any direct or indirect super class can be the reference
			Object obj = new Street();

		- any interface that is implemented
			Driveable obj = new Street();

	the reference of an object must have access to the variable or method, otherwise the code will not compile

	the execution happens on the object side
		ex: if a method is overridden the implementation of the object is executed

WebDriver driver = new ChromeDriver()

WebDriver driver = new FireDriver()

java.day55_polymorphism.animal
java.day55_polymorphism.clothes

