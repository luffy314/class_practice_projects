
Maps Practice
Enum
____________________________________________________________

Map

    interface that maintains the key/value pairs

    Entry: key/value pair

        keys must be unique
        values can be duplicate

Class that implement the Map interface

    HashMap: the order is not guaranteed
        null key is allowed

    LinkedHashMap: insertion order is maintained
        null key is allowed

    TreeMap: implements SortedMap. The entries are sorted by the keys in natural order
        null key is not allowed

    HashTable: the order is not guaranteed
        synchronized (thread safe)
        does not allow null keys or values

syntax of HashMap

    Map< key, value > name = new HashMap<>();

Looping through map

    We cannot loop directly in the map

    To iterate through a map use

        keySet(): returns a Set of the keys in the map

        values(): return the Collection of values in the map

        entrySet(): returns the entries in the map

            getKey()
            getValue()
____________________________________________________________

Database

    when you get information from a database you will get the information as a

    List< Map<String, String>>

    where the  List< Map<String, String>> is an ArrayList that holds Map<String, String> as the elements

    each Map<String, String> is would contain the information about whatever data you are looking at, for example people would have keys of FIRST_NAME, AGE, LOCATION, etc

    so everyone Person would have their information from the database as a key/value pair and the ArrayList holds all those maps

    Example from the code:

        System.out.println(list.get(0).get("LAST_NAME"));

            this could give the last name from the first person in the ArrayList

        System.out.println("First name: " + list.get(list.size() - 1).get("FIRST_NAME"));

            this would give the first name from the last index of the ArrayList

____________________________________________________________

Enum: Enumeration

    it is special datatype that is used to define constant variables

Examples:

    enum Direction{
        NORTH, EAST, SOUTH, WEST
    }

    enum Grade {
        A, B, C, D, F
    }

The enum define Fields (variables)

    usually written in uppercase letters since they are constants

Enums act like a class to they have some variables, methods

-- Using the enum

    -> We can make objects out of our enum

        LetterGrade grade;
        grade = LetterGrade.A;

    > Note: we can only use fields that the enum has declared
        Doing LetterGrade.H would given syntax error


    -> Enums can also be used with switch statements:

        Ex:

        switch (grade) {
            case A:
                System.out.println("You got an A!");
                break;
            case B:
                System.out.println("Not bad");
                break;
            case C:
                System.out.println("You could do better");
                break;
            case D:
                System.out.println("Not so good");
                break;
            case F:
                System.out.println("You failed");
        }
