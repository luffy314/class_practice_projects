4/23/2022

Day 51 Inheritance

day51_inheritance
____________________________________________________________

OOP: Inheritance
Protected keyword
Method Overriding
final keyword
____________________________________________________________

Sunday: Off
Monday: Alumni sessions start
	DO NOT join regular class
____________________________________________________________

Constructor in inheritance

	constructor is not inherited

	- The sub class constructor must still call the super class constructor

super

	reference of the parent class objects

	-> just like this keyword is the reference of the current instances

	super(): call the parent constructor

	this(): calls a constructor in the same class

	super vs super()

		super is the reference of a parent object
			instance variables, instance methods

		super(): constructor calling

Object class:

	parent of all other classes in java

	this is where toString method is defined

When you created a new java class/file, these were the things there:

Tester.java

	import java.lang;

	public class Tester extends Object {

		public Tester(){
			super();
		}

	}

Note: Remember that creating a constructor gets rid of the default constructor, so you must handle the rules about calling the parent class constructor

What you see:

Tester.java

	public class Tester {


	}

day51_inheritance.app

Inheritance relationships

	Java does not support multiple inheritance

		A class cannot have more than one parent

	Single level inheritance: relationship between two classes

		public class Animal {}

		public class Cow extends Animal {}

	Multi level inheritance: relationship between more than 2 classes. One parent inherits to another class, which becomes the parent of other classes, etc

		public class Person {}

		public class Employee extends Person {}

		public class Tester extends Employee {}

	Hierarchical inheritance: relationship between more than 2 classes. One class is the parent of all other classes

		public class Season {}

		public class Winter extends Season {}

		public class Summer extends Season {}

		public class Spring extends Season {}

Access modifiers with Inheritance

	(most visible -> least visible)

	public: inherit to anywhere in the project

	protected: protected members are directly accessible in the same package and by sub classes in any package

		-> inherit anywhere in the project

		-> direct access, only in the same package

		with no inheritance, protected works like default

	default: inherit only within the same package

	private: cannot inherit, because private makes everything accessible only in the same class


day51_inheritance.access.a
day51_inheritance.access.b
day51_inheritance.shapes
day51_inheritance.lyft

Method Overriding

	changing the implementation(code) of a method that is defined in the super class

		-> simpler way to say: after inheriting a method we can change how it works

	Uses of overriding: able to define method/action that can become more specific in child class

		-> used much more in abstraction

@Override

	this is an annotation
	makes sure the method is being overridden correctly
	it is optional, but in general recommended to use

Method overriding rules:

    - method needs to be inherited
    - the method signature needs to be same
    	method signature: name and parameters
    - access modifier can stay the same, or be changed to more visibility, but not less

        public > protected > default > private

        ex:
            String getName(){
        		return "name";
    		}

    		at this moment the getName() method is default, so it is possible to override and change the access modifier to public or protected, because they are more visible

    - return type: must be the same

    - overriding is for instance methods

IQ: What is the difference between method overloading and overriding

    overloading: have a method with the same name, different parameters
        -> happens in the same class

    overriding: changing the implementation of a method that comes from a super class
        -> happens between the super and sub class

    summary:
    	Method overloading is used to create multiple ways to call and use a method by changing the parameters. It allows more methods to be created with the same name, but different inputs. Method overriding is for changing the implementation of a method that was inherited from a super class and allowing to be more specific for the sub class objects
