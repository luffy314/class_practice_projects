

Iterable: Root Interface of Collection

	      Classes that are implementing iterable interface gains the ability to use iterator interface

		Iterator (I):
			1. allows us to get access to each object
			2. allows us to remove any objects from collection type


			methods:
				hasNext(): checks if there is object. returns boolean

				next():
						if hasNext() is true ==> can get access to the object
						if hasNext() is false==> no object can be accessed

				remove(): removes the object




3 data structures:
	1. Array
	2. Collection
	3. Map

Map (I): pair of collection
		 does not support primitives
		 size is dynamic
		 key MUST be unique, value can be duplicated

		HashMap (C): both key and value can be null
					 Maintains the random order

		LinkedHashMap (C): both key and value can be null
						   Maintains the insertion order

		TreeMap (C): key can not be null, but value can be null
					 Maintains the sorted order

		Hashtable (C):  both key and value can NOT be null
						Maintains the random order
						synchronized


Methods of Map:
		put(key, value): inserts the given key and value to map

		get(key): returns the value of the given key

		replace(key, newValue): replaces the value of the given key with the given new value

		remove(key): removes the given key and its value from the map

		containsKey(key): returns true if the given key is conatined in the map, otherwise returns false

		containsValue(Value): returns true if the given value is conatined in the map, otherwise returns false

		isEmpty(): returns true if the size of the map is 0, otherwise returns false

		clear(): removes all the pairs from the map

		---------------------------

		keySet(): returns all the keys of the map, returnType is Set

		values(): returns all the values of the map, returnType is Collection

		entrySet(): returns all the entries (Entry: key & value) of map

				getkey()
				getValue()
